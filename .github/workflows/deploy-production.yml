name: Deploy Production

on:
  push:
    branches:
      - "main"

concurrency:
  group: cd-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # check-branch:
  #   # Prevent to manually deploy other then 'master' branch to production environment
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Check Production branch ref
  #       if: ${{ github.ref != 'refs/heads/master' }}
  #       run: |
  #         echo "Cannot deploy to production server from a branch different of 'master'"
  #         exit 1

  get-deploy-data:
    name: Get deploy data
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      version-tag: ${{ steps.get-version.outputs.version-tag }}
      milestone-number: ${{ steps.get-milestone.outputs.milestone-number }}
      release-notes: ${{ steps.get-release-notes.outputs.release-notes }}
    steps:
      - name: Checkout to repository
        uses: actions/checkout@v3

      - name: Get version
        id: get-version
        run: |
          version=$(cat package.json | jq -r ".version")
          versionTag="v$version"
          
          echo "::set-output name=version::$version"
          echo "::set-output name=version-tag::$versionTag"

      - name: Get milestone
        id: get-milestone
        run: |
          data="$(gh api repos/$GITHUB_REPOSITORY/milestones)"

          milestoneTitle="${{ steps.get-version.outputs.version-tag }}"
          milestoneNumber=$(echo $data | jq -r -c --arg title $milestoneTitle '.[] | select(.title == $title) | .number')

          echo "::echo::on"
          echo "::set-output name=milestone-number::$milestoneNumber"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}

      - name: Get release notes
        id: get-release-notes
        uses: Beakyn/gha-format-release-notes@v1
        with:
          repository: ${{ github.repository }}
          milestone: ${{ steps.get-milestone.outputs.milestone-number }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  database-migration:
    name: Database migration
    needs: get-deploy-data
    runs-on: ubuntu-latest
    steps:
      - name: Migrate database data
        run: |
          echo "Migrating database…"

  deploy-production:
    name: Deploy production
    needs: ['get-deploy-data', 'database-migration']
    runs-on: ubuntu-latest
    steps:
      - name: Checkout to repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Test read deploy variables
        run: |
          echo "VERSION TAG:\n ${{ needs.get-deploy-data.outputs.version-tag }}"
          echo "SHA: ${{ github.sha }}"
          echo "TOKEN: ${{ github.token }}"

  create-releases:
    name: Create releases
    needs: ['get-deploy-data', 'deploy-production']
    runs-on: ubuntu-latest
    steps:
      - name: Create GibHub release
        run: |
          echo "tag_name: ${{ needs.get-deploy-data.outputs.version-tag }}"
          echo "body:\n ${{ needs.get-deploy-data.outputs.release-notes }}"

  update-graphql-schemas:
    name: Update GraphQL schemas
    needs: ['deploy-production']
    runs-on: ubuntu-latest
    steps:
      - name: Checkout to repository
        uses: actions/checkout@v3

      - name: Updating schemas
        run: |
          echo "Updating schemas…"

  notify-deployed:
    name: Notify deployed
    runs-on: ubuntu-latest
    needs: ['deploy-production']
    steps:
      - name: Notify slack
        if: always() # Pick up events even if the job fails or is canceled.
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: |
          echo "JOB STATUS: ${{ job.status }}"
          echo "MATRIX: $MATRIX_CONTEXT"
          # echo "JOB REPO: ${process.env.AS_REPO}"
          # echo "JOB COMMIT: ${process.env.AS_COMMIT}"
          # echo "JOB AUTHOR: ${process.env.AS_AUTHOR}"
          # echo "JOB: ${process.env.AS_JOB}"
          # echo "JOB TOOK: ${process.env.AS_TOOK}"
          # echo "JOB EVENT_NAME: ${process.env.AS_EVENT_NAME}"

  close-milestone:
    name: Close milestone
    needs: ['get-deploy-data', 'deploy-production']
    runs-on: ubuntu-latest
    steps:
      - name: Close milestone
        run: |
          echo "MILESTONE NUMBER: ${{ needs.get-deploy-data.outputs.milestone-number }}"

      # - name: Close milestone
      #   uses: Beakyn/gha-close-milestone@v1.1.1
      #   with:
      #     repository: ${{ github.repository }}
      #     milestone-number: ${{ jobs.get-deploy-data.outputs.milestone-number }}
